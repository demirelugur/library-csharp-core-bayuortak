<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ output extension=".nuspec" encoding="utf-8" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Xml.Linq" #>
<#
var basdate = new DateTime(2024, 10, 1);
var bitdate = DateTime.Today;
var outputFilePath = Path.Combine(Path.GetDirectoryName(this.Host.TemplateFile), "nuget/version.xml");
Match match = Regex.Match(File.ReadAllText(outputFilePath), @"<version>(.*?)<\/version>");
if (match.Success)
{
   int build;
   var values = Convert.ToString(match.Groups[1].Value).Split('.');
   var major = bitdate.Year - basdate.Year;
   var minor = bitdate.Month - basdate.Month;
   var revision = bitdate.Day - basdate.Day;
   if (revision < 0)
   {
       minor--;
       revision = DateTime.DaysInMonth(basdate.Year, basdate.Month) - basdate.Day + bitdate.Day;
   }
   if (minor < 0)
   {
       major--;
       minor = 12 + minor;
   }
   if(major == Convert.ToInt32(values[0]) && minor == Convert.ToInt32(values[1]) && revision == Convert.ToInt32(values[2])) {
        build = Convert.ToInt32(values[3]);
        build++;
   }
   else { build = 0; }
   version = String.Join(".", major.ToString(), minor.ToString(), revision.ToString(), build.ToString());
   var xmlDoc = XDocument.Load(this.Host.TemplateFile.Replace(".tt", ".csproj"));
   var s = new List<string>();
   foreach (var item in xmlDoc.Descendants("PackageReference").Select(x => new
   {
       include = x.Attribute("Include")?.Value,
       version = x.Attribute("Version")?.Value
   }).Where(x => !String.IsNullOrEmpty(x.include) && !String.IsNullOrEmpty(x.version)).ToArray()) { s.Add($"<dependency id=\"{item.include}\" version=\"{item.version.Replace(".*", ".0")}\" exclude=\"Build,Analyzers\" />"); }
   dependencies = String.Join("\n", s);
   File.WriteAllText(outputFilePath, $"<version>{version}</version>");
   //WriteLine("<!-- Lorem Ipsum -->");
}
#>
<?xml version="1.0" encoding="utf-8"?>
<package>
  <metadata>
    <id>BayuOrtak.Core</id>
    <version><#= this.version #></version>
    <title>Ortak Projeler Yönetim Modülü</title>
    <authors>Uğur DEMİREL</authors>
    <owners>T.C. Bayburt Üniversitesi</owners>
    <requireLicenseAcceptance>true</requireLicenseAcceptance>
    <description>T.C. Bayburt Üniversitesi Web Servis İşlemleri, LDAP, Yardımcı Foksiyonlar</description>
    <copyright>Copyright © <#= (basdate.Year == bitdate.Year ? basdate.Year.ToString() : String.Join(" - ", basdate.Year.ToString() , bitdate.Year.ToString())) #></copyright>
    <icon>nuget\icon.png</icon>
    <readme>README.md</readme>
    <license type="expression">MIT</license>
    <dependencies><group targetFramework="net9.0"><#= this.dependencies #></group></dependencies>
  </metadata>
  <files>
    <file src="nuget\icon.png" target="nuget\" />
    <file src="README.md" />
    <file src="bin\Release\net9.0\*.dll" target="lib\net9.0" />
    <file src="bin\Release\net9.0\BayuOrtak.Core.runtimeconfig.json" target="lib\net9.0" />
    <file src="bin\Release\net9.0\BayuOrtak.Core.xml" target="lib\net9.0" />
  </files>
</package><#+ string version = "1.0.0.0", dependencies = ""; #>
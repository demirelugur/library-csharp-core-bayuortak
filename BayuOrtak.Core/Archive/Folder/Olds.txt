************************
public static void EachAction<T>(this IEnumerable<T> values, Action<T> action)
{
    foreach (var value in values) { action(value); } //Bu metodun adı "ForEach" olmamalıdır; zira "Microsoft.Ajax.Utilities" isim alanıyla çakışma riski bulunmaktadır.
}
************************
public static void EachActionIndex<T>(this IEnumerable<T> values, Action<T, int> action)
{
    var i = 0;
    foreach (var value in values) { action(value, i++); }
}
************************
public static DateTime ToDate(this int value, double time = 0, bool isSecond = true)
{
    var r = _date.beginOfOLEAutomation.AddDays(Convert.ToDouble(value));
    if (time > 0) { r = (isSecond ? r.AddSeconds(time) : r.AddMilliseconds(time)); }
    return r;
}
************************
public static int TransactionalSave(this DbContext dbContext)
{
    int r;
    using (var ts = new TransactionScope(TransactionScopeOption.Required))
    {
        r = dbContext.SaveChanges();
        ts.Complete();
    }
    return r;
} 
************************
public static async Task<int> TransactionalSaveAsync(this DbContext dbContext)
{
    int r;
    using (var ts = _other.TransactionScopeForAsync)
    {
        r = await dbContext.SaveChangesAsync();
        ts.Complete();
    }
    return r;
}
************************
public static void FileUpload(this byte[] bytes, string physicallyPath)
{
    Guard.IsEmpty(bytes, nameof(bytes));
    Guard.IsEmpty(physicallyPath, nameof(physicallyPath));
    _file.DirectoryCreate(new FileInfo(physicallyPath).DirectoryName);
    using (var fs = new FileStream(physicallyPath, FileMode.Append))
    {
        fs.Write(bytes, 0, bytes.Length);
        fs.Flush();
        fs.Close();
    }
}
************************
public static void FileUpload(this IFormFile file, string physicallyPath)
{
    Guard.IsEmpty(file, nameof(file));
    Guard.IsEmpty(physicallyPath, nameof(physicallyPath));
    _file.DirectoryCreate(new FileInfo(physicallyPath).DirectoryName);
    using (var fs = new FileStream(physicallyPath, FileMode.Create))
    {
        file.CopyTo(fs);
    }
}
************************
public static byte[] Zip(this byte[] bytes)
{
    Guard.IsEmpty(bytes, nameof(bytes));
    using (var ms = new MemoryStream())
    {
        using (var gzs = new GZipStream(ms, CompressionMode.Compress))
        {
            gzs.Write(bytes, 0, bytes.Length);
            gzs.Close();
            return ms.ToArray();
        }
    }
}
************************
public static byte[] UnZip(this byte[] bytes)
{
    Guard.IsEmpty(bytes, nameof(bytes));
    using (var ms = new MemoryStream(bytes))
    {
        using (var gzs = new GZipStream(ms, CompressionMode.Decompress))
        {
            using (var rs = new MemoryStream())
            {
                gzs.CopyTo(rs);
                return rs.ToArray();
            }
        }
    }
}
************************
public static bool IsAnonymousClass(this Type type)
{
    if (type.IsGenericType)
    {
        var genericType = type.GetGenericTypeDefinition();
        if (genericType != null && genericType.IsClass && genericType.IsSealed && genericType.Attributes.HasFlag(TypeAttributes.NotPublic) && _try.TryCustomAttribute(genericType, out CompilerGeneratedAttribute _)) { return true; }
    }
    return false;
}
************************
public static bool TryReplaceSanitize(string value, out string outvalue)
{
    value = value.ToStringOrEmpty();
    if (value == "")
    {
        outvalue = "";
        return true;
    }
    try
    {
        outvalue = new HtmlSanitizer(new HtmlSanitizerOptions())
        {
            AllowDataAttributes = true
        }.Sanitize(value).Trim();
        return true;
    }
    catch
    {
        outvalue = "";
        return false;
    }
}
************************
public static bool IsIPv4(this IPAddress ipAddress) => (ipAddress != null && ipAddress.AddressFamily == AddressFamily.InterNetwork);
************************
public static int GetToOADateInteger => DateTime.Today.ToOADateInteger();
************************
public static string JoinAllMessage(this Exception exception, string seperator = ", ") => String.Join(seperator, exception.AllExceptionMessage());
************************
[AttributeUsage(AttributeTargets.Property | AttributeTargets.Parameter, AllowMultiple = false)]
public sealed class Validation_CollectionHasValueAttribute<T> : ValidationAttribute
{
    public Validation_CollectionHasValueAttribute() { }
    protected override ValidationResult IsValid(object value, ValidationContext validationContext)
    {
        var ic = value as ICollection<T>;
        if (ic == null) { return new ValidationResult(this.ErrorMessage ?? $"{validationContext.DisplayName} türü uyumsuzdur!", new List<string> { validationContext.MemberName }); }
        if (validationContext.IsRequiredAttribute() && ic.Count == 0) { return new ValidationResult(this.ErrorMessage ?? $"{validationContext.DisplayName}, null veya boş olamaz!", new List<string> { validationContext.MemberName }); }
        return ValidationResult.Success;
    }
}
************************
/// <summary>
/// IFormCollection içindeki form verilerini belirtilen bir grup adıyla eşleşen özelliklere sahip
/// T sınıfının bir örneğine haritalar. Formdaki her anahtarın, verilen grup adını içermesi durumunda 
/// ilgili özellik ile eşleştirilir ve değeri atanır.
/// 
/// Özellikle aynı formda birden fazla grup verisi olduğunda, belirli bir gruptaki verilere erişmek için kullanılır.
/// </summary>
/// <typeparam name="T">Verilerin haritalanacağı sınıfın tipi.</typeparam>
/// <param name="form">
/// IFormCollection tipinde olan ve form verilerini içeren parametre. 
/// Formdaki anahtarlar, belirtilen grup adıyla eşleşen özellik adlarına göre işlenir.
/// </param>
/// <param name="propertygroup">
/// Hangi grup adındaki form verilerinin işleneceğini belirleyen bir grup adı.
/// Bu grup adı, form anahtarlarının başında olmalıdır ve belirtilen özelliklere karşılık gelir.
/// Örneğin &quot;adres.&quot; gibi bir grup adı, &quot;adres.cadde&quot;, &quot;adres.sokak&quot; gibi anahtarlarla eşleşir.
/// </param>
/// <param name="separator">
/// Grup adını ve form anahtarını ayırmak için kullanılan karakter. Varsayılan olarak &#39;.&#39; (nokta) kullanılır.
/// </param>
public static T MapWithPropertyGroup<T>(this IFormCollection form, string propertygroup, char separator = '.') where T : class, new()
{
    var instance = new T();
    propertygroup = propertygroup.ToStringOrEmpty();
    if (propertygroup == "") { return instance; }
    if (propertygroup.Length > 1 && propertygroup.LastIndexOf(separator) != (propertygroup.Length - 1)) { propertygroup = String.Concat(propertygroup, separator.ToString()); } /* Son karakter nokta mı? kontrolü */
    foreach (var key in form.Keys)
    {
        if (!key.StartsWith(propertygroup)) { continue; }
        var property = typeof(T).GetProperty(key.Replace(propertygroup, ""));
        if (property == null) { continue; }
        if (!form.TryGetValue_string(key, out string _value)) { continue; }
        var _pd = _to.ParseOrDefault_tuple(_value, property.PropertyType);
        if (_pd.value == null) { continue; }
        property.SetValue(instance, _pd.value);
    }
    return instance;
}
************************
/// <summary>
/// Verilen nesnenin IDisposable arayüzünü uygulayıp uygulamadığını kontrol eder.
/// Eğer öyleyse, nesneyi serbest bırakır (dispose) işlemini gerçekleştirir.
/// </summary>
/// <param name="value">Serbest bırakılması gereken nesne.</param>
public static void TryDispose(object value)
{
    if (value != null && value is IDisposable _d) { _d.Dispose(); }
}
************************
/// <summary>
/// Verilen bir nesne örneğine göre dosya yolu oluşturur. Belirtilen özellik adlarına göre
/// dosya yolu, benzersiz ID (Guid) ve uzantı bilgilerini alarak, bunları birleştirir.
/// 
/// Varsayılan olarak &quot;DosyaYolu&quot;, &quot;GuidID&quot; ve &quot;Uzanti&quot; adlarını kullanır. İstenirse,
/// bu adlar &quot;properties&quot; parametresi ile özelleştirilebilir.
/// 
/// Örneğin: &quot;/path/to/file/F6D944DC-65B1-40CA-8E84-2588AA6BA768.pdf&quot; biçiminde bir dosya yolu döner.
/// </summary>
/// <typeparam name="T">
/// Dosya yolunun oluşturulması için gerekli özellikleri barındıran nesnenin türü.
/// </typeparam>
/// <param name="value">
/// Dosya yolu oluşturmak için gereken özellikleri içeren nesne örneği.
/// </param>
/// <param name="properties">
/// İsteğe bağlı olarak dosya yolu, benzersiz ID ve uzantı özelliklerinin adları.
/// İlk değer dosya yolunu, ikinci değer GUID&quot;yi ve üçüncü değer uzantıyı temsil etmelidir.
/// Belirtilmezse varsayılan olarak { &quot;DosyaYolu&quot;, &quot;GuidID&quot;, &quot;Uzanti&quot; } kullanılır.
/// </param>
/// <returns>
/// Dosya yolunu, benzersiz ID&quot;yi ve uzantıyı içeren birleştirilmiş bir dize olarak döner.
/// </returns>
/// <exception cref="ArgumentException">
/// Eğer &quot;properties&quot; parametresi tam olarak 3 özellik adı içermezse veya belirtilen özellikler
/// sınıfta bulunmuyorsa veya belirtilen türlere uymuyorsa bir ArgumentException hatası fırlatılır.
/// </exception>
public static string GetFilePath<T>(this T value, params string[] properties) where T : class
{
    Guard.IsNull(value, nameof(value));
    properties = (properties ?? Array.Empty<string>()).Select(x => x.ToStringOrEmpty()).Where(x => x != "").Distinct().ToArray();
    if (properties.Length == 0) { properties = new string[] { "DosyaYolu", "GuidID", "Uzanti" }; }
    if (properties.Length != 3) { throw new ArgumentException($"{nameof(properties)} parametresi, aralarında ';' ile ayrılmış tam olarak 3 özellik adı içermelidir!", nameof(properties)); }
    var type = typeof(T);
    var property_dy = type.GetProperty(properties[0]);
    if (property_dy == null) { throw new ArgumentException($"{type.FullName} içerisinde ${properties[0]} üzerine özellik bulunmamaktadır!", properties[0]); }
    var property_uid = type.GetProperty(properties[1]);
    if (property_uid == null) { throw new ArgumentException($"{type.FullName} içerisinde ${properties[1]} üzerine özellik bulunmamaktadır!", properties[1]); }
    var property_uzanti = type.GetProperty(properties[2]);
    if (property_uzanti == null) { throw new ArgumentException($"{type.FullName} içerisinde ${properties[2]} üzerine özellik bulunmamaktadır!", properties[2]); }
    var dosyaYolu = property_dy.GetValue(value) as String;
    if (dosyaYolu.IsNullOrEmpty_string()) { throw new ArgumentException($"{properties[0]} türü {nameof(String)} olmalıdır!", properties[0]); }
    var guidID = property_uid.GetValue(value) as Guid?;
    if (!guidID.HasValue) { throw new ArgumentException($"{properties[1]} türü {nameof(Guid)} olmalıdır!", properties[1]); }
    var uzanti = property_uzanti.GetValue(value) as String;
    if (uzanti.IsNullOrEmpty_string()) { throw new ArgumentException($"{properties[2]} türü {nameof(String)} olmalıdır!", properties[2]); }
    return String.Join("", dosyaYolu, guidID.Value.ToString().ToUpper(), uzanti);
}
************************
/// <summary>
/// Verilen URI için bir EndpointNotFoundException oluşturur.
/// </summary>
/// <param name="uri">Hata mesajında kullanılacak URI.</param>
/// <returns>EndpointNotFoundException nesnesi döner.</returns>
public static EndpointNotFoundException CreateEndpointNotFoundException(this Uri uri)
{
    Guard.IsNull(uri, nameof(uri));
    return new EndpointNotFoundException($"\"{uri.ToString()}\" adresiyle bağlantı kurulamadı!", new Exception(_title.iletisim_bilgiislem_webyazilim));
}
************************
/// <summary>
/// Belirtilen değerleri güncelleyerek asenkron olarak bir entity&#39;yi günceller.
/// </summary>
/// <param name="isSaveChanges">Değişikliklerin kaydedilip kaydedilmeyeceğini belirtir.</param>
/// <param name="keyValue">Güncellenecek entity&#39;nin anahtar değeri.</param>
/// <param name="values">Güncellenmesi gereken değerler.</param>
/// <param name="columns">Güncellenmesi gereken property&#39;ler.</param>
/// <returns>Güncellenen entity.</returns>
public async Task<T> UpdateAsync(bool isSaveChanges, object keyValue, object[] values, params Expression<Func<T, object>>[] columns)
{
    Guard.CheckNull(keyValue, nameof(keyValue));
    Guard.CheckEqualCount(values, columns);
    var entity = await this.DbSet.FindAsync(keyValue);
    Guard.CheckNull(entity, nameof(entity));
    foreach (var item in columns.Select((column, i) => new
    {
        n = column.GetExpressionName(),
        v = values[i]
    })) { _other.SetPropertyValue(entity, item.n, item.v); }
    if (isSaveChanges) { await this.Context.SaveChangesAsync(); }
    return entity;
}
************************
/// <summary>
/// Belirtilen entity varsa siler, aksi takdirde anahtar değerleri ile siler.
/// </summary>
/// <param name="entity">Silinecek entity.</param>
/// <param name="keyValues">Anahtar değerleri.</param>
public void DeleteIfExistsEntity(T entity, params object[] keyValues)
{
    if (entity == null) { this.DeleteByKey(keyValues); }
    else { this.Delete(entity); }
}
************************
/// <summary>
/// Belirtilen koleksiyon ve koşula uyan entity&#39;leri siler.
/// </summary>
/// <param name="entities">Silinecek entity koleksiyonu.</param>
/// <param name="predicate">Silinecek entity&#39;ler için filtre.</param>
public void DeleteIfExistsCollection(ICollection<T> entities, Expression<Func<T, bool>> predicate)
{
    if (entities.IsNullOrEmpty_collection()) { this.DeleteByPredicate(predicate); }
    else { this.DeleteRange(entities); }
}
************************

BaseEnum.cs içerisinde olmalıdır!

/// <summary>
/// Bir değeri enum türüne dönüştürmeye çalışır.
/// <para>value için tanımlanan nesneler: long, bool, string, JToken(Integer,Boolean,String)</para>
/// </summary>
/// <param name="value">Dönüştürülecek değer</param>
/// <param name="outvalue">Çıktı enum değeri</param>
/// <returns>Dönüşüm başarılıysa <see langword="true"/>, aksi halde <see langword="false"/></returns>
public static bool TryForseParse(object value, out T outvalue)
{
    if (value != null)
    {
        if (Int64.TryParse(value.ToStringOrEmpty(), out long _i))
        {
            if (IsDefined(Convert.ChangeType(_i, UnderlyingType))) /* Not: Eğer UnderlyingType ile türü çevrilmezse IsDefined hata vermektedir */
            {
                outvalue = (T)Enum.ToObject(_type, _i);
                return true;
            }
        }
        if (value is Boolean _b) { return TryForseParse(_b ? 1 : 0, out outvalue); }
        if (value is String _s)
        {
            _s = _s.Trim();
            var _e = EnumArrayDetail.Where(x => x.tx == _s || (x.desc != "" && _s.Includes(x.desc, x.descseo))).ToArray();
            if (_e.Length > 0)
            {
                outvalue = (T)Enum.ToObject(_type, _e[0].vl);
                return true;
            }
        }
        if (value is JToken _j)
        {
            if (_j.Type == JTokenType.Integer) { return TryForseParse(_j.Value<long>(), out outvalue); }
            if (_j.Type == JTokenType.Boolean) { return TryForseParse(_j.Value<bool>(), out outvalue); }
            if (_j.Type == JTokenType.String) { return TryForseParse(_j.Value<string>(), out outvalue); }
        }
    }
    outvalue = default;
    return false;
}
************************
/// <summary>
/// Verilen özellikleri içeren IQueryable kaynağını dahil eder.
/// </summary>
/// <typeparam name="T">İçerik türü.</typeparam>
/// <param name="source">IQueryable kaynak.</param>
/// <param name="includes">Dahil edilecek özelliklerin ifadesi.</param>
/// <returns>Güncellenmiş IQueryable kaynak.</returns>
public static IQueryable<T> IncludeProperties<T>(this IQueryable<T> source, params Expression<Func<T, object>>[] includes) where T : class
{
    includes = includes ?? Array.Empty<Expression<Func<T, object>>>();
    foreach (var include in includes) { source = source.Include(include); }
    return source;
}
************************
/// <summary>
/// IFormCollection içindeki form verilerini belirtilen T sınıfının bir örneğine haritalar.
/// Formdaki her bir anahtarı kontrol ederek, sınıftaki ilgili özelliğe karşılık gelen değeri formdan alır ve 
/// o özelliğe atar. Eğer formdaki değer ilgili özellik ile uyumlu bir şekilde dönüştürülebilirse, atama işlemi yapılır.
/// 
/// Kullanım senaryosu: Form verilerini manuel olarak ayrıştırmadan, formdan gelen verilere
/// model sınıfı ile erişmek için kullanılır.
/// </summary>
/// <param name="form">
/// IFormCollection tipinde olan ve form verilerini içeren parametre.
/// Formdaki her bir anahtar, sınıftaki ilgili özellik adıyla eşleştirilerek bu veriler alınır ve sınıfın özelliklerine atanır.
/// </param>
public static T Map<T>(this IFormCollection form) where T : class, new()
{
    var instance = new T();
    foreach (var key in form.Keys)
    {
        var property = typeof(T).GetProperty(key);
        if (property == null) { continue; }
        if (!form.TryGetValue_string(key, out string _value)) { continue; }
        var _pd = _to.ParseOrDefault_tuple(_value, property.PropertyType);
        if (_pd.value == null) { continue; }
        property.SetValue(instance, _pd.value);
    }
    return instance;
}
************************
/// <summary>
/// Belirtilen bir enum değerini <see cref="EnumResult"/> nesnesine dönüştürür.
/// </summary>
/// <typeparam name="T">Enum türü.</typeparam>
/// <param name="value">Dönüştürülecek enum değeri.</param>
/// <returns>Dönüştürülmüş <see cref="EnumResult"/> nesnesi.</returns>
public static EnumResult Cast<T>(T value) where T : Enum => Cast(typeof(T), value);
************************
/// <summary>
/// Verilen enum türü ve değeri ile bir <see cref="EnumResult"/> nesnesi oluşturur.
/// Enum değerinin geçerli olup olmadığını kontrol eder ve geçerli ise, 
/// enum değeri, adı ve açıklaması ile birlikte <see cref="EnumResult"/> döndürür.
/// 
/// Desteklenen <paramref name="value"/> türleri arasında <see cref="string"/>, 
/// <see cref="Enum"/>, <see cref="byte"/>, <see cref="short"/>, <see cref="int"/> ve <see cref="long"/> 
/// yer alır. Geçersiz değerler için boş bir <see cref="EnumResult"/> döner.
/// </summary>
/// <param name="enumtype">Enum türü.</param>
/// <param name="value">Dönüştürülecek enum değeri ya da enum adını temsil eden string.</param>
/// <returns>Geçerli enum değeri için <see cref="EnumResult"/> nesnesi; 
/// geçersiz değerler için boş bir <see cref="EnumResult"/> döner.</returns>
public static EnumResult Cast(Type enumtype, object value)
{
    if (enumtype == null || !enumtype.IsEnum || value == null) { return new EnumResult(); }
    if ((value.GetType().IsEnum || value is byte || value is short || value is int || value is long))
    {
        var _v = Convert.ToInt64(value);
        return enumtype.ToEnumArray().Where(x => x.vl == _v).FirstOrDefault() ?? new EnumResult();
    }
    if (value is String _enumName && Enum.IsDefined(enumtype, _enumName)) { return enumtype.ToEnumArray().Where(x => x.tx == _enumName).FirstOrDefault() ?? new EnumResult(); }
    return new EnumResult();
}
************************
/// <summary>
/// Veritabanı şemasındaki sütunların maksimum uzunluklarını alır.
/// </summary>
/// <returns>Sütun adlarını ve maksimum uzunluklarını içeren bir sözlük döner.</returns>
/// <remarks>
/// <para>
/// SELECT S.[name] AS name_schema
/// , T.[name] AS name_table
/// , C.[name] AS name_column
/// , (CASE
/// WHEN (C.[max_length] = -1 OR (C.[system_type_id] IN (167, 175))) THEN C.[max_length]
/// ELSE C.[max_length] / 2  END) AS column_maxlength
/// , C.[column_id]
/// FROM [SYS].[columns] AS C
/// INNER JOIN [SYS].[tables] AS T ON C.[object_id] = T.[object_id]
/// INNER JOIN [SYS].[schemas] AS S ON T.[schema_id] = S.[schema_id]
/// WHERE (C.[system_type_id] IN (167, 175, 231)) 
/// </para>
/// </remarks>
public async Task<Dictionary<string, object>> GetSchemaColumnMaxLengthsAsync()
{
    Dictionary<string, object> r_column, r_table, r_schema = new Dictionary<string, object>();
    var _data = await this.QueryRawDynamicAsync(@"SELECT S.[name] AS name_schema
    , T.[name] AS name_table
    , C.[name] AS name_column
    , (CASE
    WHEN (C.[max_length] = -1 OR (C.[system_type_id] IN (@t_varchar, @t_char))) THEN C.[max_length]
    ELSE C.[max_length] / 2  END) AS column_maxlength
    , C.[column_id]
    FROM [SYS].[columns] AS C
    INNER JOIN [SYS].[tables] AS T ON C.[object_id] = T.[object_id]
    INNER JOIN [SYS].[schemas] AS S ON T.[schema_id] = S.[schema_id]
    WHERE (C.[system_type_id] IN (@t_varchar, @t_char, @t_nvarchar))", CommandType.Text, CommandBehavior.CloseConnection, default, new
    {
        t_varchar = SqlDbType.VarChar.ToSystemTypeId(),
        t_char = SqlDbType.Char.ToSystemTypeId(),
        t_nvarchar = SqlDbType.NVarChar.ToSystemTypeId()
    });
    foreach (var schema in _data.Select(x => new
    {
        name_schema = (string)x.name_schema,
        name_table = (string)x.name_table,
        name_column = (string)x.name_column,
        column_maxlength = (int)x.column_maxlength,
        column_id = (int)x.column_id
    }).GroupBy(x => x.name_schema).OrderBy(x => x.Key).ToArray())
    {
        r_table = new Dictionary<string, object>();
        foreach (var table in schema.GroupBy(x => x.name_table).OrderBy(x => x.Key).ToArray())
        {
            r_column = new Dictionary<string, object>();
            foreach (var item in table.OrderBy(x => x.column_id).ToArray()) { r_column.Add(item.name_column, item.column_maxlength); }
            r_table.Add(table.Key, r_column);
        }
        r_schema.Add(schema.Key, r_table);
    }
    return r_schema;
}
************************
/// <summary>
/// Verilen anahtar ile bir değeri ITempDataDictionary&#39;ye JSON biçiminde ekler.
/// TempData üzerinde geçici olarak saklanacak herhangi bir nesneyi JSON biçiminde dönüştürerek depolar.
/// </summary>
/// <param name="tempData">Geçici veri depolamak için kullanılan ITempDataDictionary.</param>
/// <param name="key">Verinin saklanacağı anahtar.</param>
/// <param name="value">Saklanacak değer (herhangi bir nesne).</param>
public static void Set(this ITempDataDictionary tempData, string key, object value) => tempData[key] = JsonConvert.SerializeObject(value);
************************
/// <summary>
/// Verilen anahtarla ITempDataDictionary&#39;den bir değeri alır ve belirtilen tipe dönüştürür.
/// Eğer değer bulunursa JSON biçiminde belirtilen tipe deserialize edilir ve TempData&#39;dan kaldırılır.
/// Eğer anahtar bulunamazsa veya değer null ise varsayılan değeri döndürür.
/// </summary>
/// <typeparam name="T">Dönüştürülecek veri tipi.</typeparam>
/// <param name="tempData">Geçici veri depolamak için kullanılan ITempDataDictionary.</param>
/// <param name="key">Alınacak değerin anahtarı.</param>
/// <returns>
/// Anahtara karşılık gelen değerin belirtilen tipe dönüştürülmüş hali. 
/// Eğer anahtar bulunamazsa veya değer null ise varsayılan tip değeri (default) döndürülür.
/// </returns>
public static T Get<T>(this ITempDataDictionary tempData, string key)
{
    if (tempData.TryGetValue(key, out object _v) && _v != null)
    {
        var r = JsonConvert.DeserializeObject<T>(_v.ToString());
        tempData.Remove(key);
        return r;
    }
    return default;
}
************************
public static bool IsFatal(this Exception exception) => (exception is StackOverflowException || exception is OutOfMemoryException || exception is AccessViolationException || exception is AppDomainUnloadedException || exception is ThreadAbortException || exception is SecurityException || exception is SEHException);
************************
public static string FormatVar_old<T>(this string value, T argument) where T : class
{
    HashSet<string> arm;
    string f;
    foreach (var itemMemberInfo in typeof(T).GetMembers(BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance).Where(x => (x is FieldInfo) || (x is PropertyInfo)))
    {
        arm = new HashSet<string>();
        foreach (Match itemMatch in Regex.Matches(value, String.Concat(@"\{", itemMemberInfo.Name, @"(\:.*?)?\}")))
        {
            if (arm.Contains(itemMatch.Value)) { continue; }
            arm.Add(itemMatch.Value);
            f = String.Concat("{0", itemMatch.Groups[1].Value, "}");
            if (itemMemberInfo is FieldInfo f_info) { value = value.Replace(itemMatch.Value, String.Format(f, f_info.GetValue(argument))); }
            else if (itemMemberInfo is PropertyInfo p_info) { value = value.Replace(itemMatch.Value, String.Format(f, p_info.GetValue(argument))); }
        }
    }
    return value;
}
************************
public class BaseDapper<T> where T : class
{
    private readonly string whereClause;
    private readonly string tableName = typeof(T).GetTableName(true);
    private readonly Dictionary<string, object> _parameters = new Dictionary<string, object>();
    private readonly Dictionary<string, object> _conditionalParameters = new Dictionary<string, object>();
    public BaseDapper(string whereClause = "")
    {
        this.whereClause = whereClause.ToStringOrEmpty();
        if (this.whereClause != "" && !this.whereClause.StartsWith("WHERE", StringComparison.OrdinalIgnoreCase)) { this.whereClause = $"WHERE {whereClause}"; }
    }
    public BaseDapper<T> Add<TKey>(Expression<Func<T, TKey>> key, TKey value)
    {
        var k = key.GetExpressionName();
        if (_parameters.ContainsKey(k)) { throw new DuplicateNameException($"{k} propertysi tanımlıdır. Tekrar eklenemez!"); }
        _parameters.Add(k, value);
        return this;
    }
    public BaseDapper<T> AddCondition<Y>(Y parameters) where Y : class
    {
        if (parameters != null)
        {
            foreach (var item in _to.ToDictionaryFromObject(parameters))
            {
                if (_parameters.ContainsKey(item.Key) || _conditionalParameters.ContainsKey(item.Key)) { throw new DuplicateNameException($"\"{item.Key}\" propertysi tanımlıdır. Tekrar eklenemez!"); }
                else { _conditionalParameters.Add(item.Key, item.Value); }
            }
        }
        return this;
    }
    public DynamicParameters Parameters
    {
        get
        {
            var p = new DynamicParameters();
            foreach (var item in _parameters.Keys) { p.Add(item, _parameters[item]); }
            foreach (var item in _conditionalParameters.Keys) { p.Add(item, _conditionalParameters[item]); }
            return p;
        }
    }
    public string Select(string[] columns)
    {
        columns = (columns ?? Array.Empty<string>()).Distinct().ToArray();
        return $"SELECT {((columns.Length == 0 || columns[0] == "*") ? "*" : String.Join(", ", columns.Select(x => $"[{x}]")))} FROM {this.tableName} {this.whereClause}".Trim();
    }
    public string Select(params Expression<Func<T, object>>[] expressions) => this.Select(expressions.Select(x => x.GetExpressionName()).ToArray());
    private string insertquery_private(string outputPrimaryKey)
    {
        var sb = new StringBuilder();
        Guard.CheckEmpty(_parameters.Keys, nameof(_parameters));
        sb.Append($"INSERT INTO {this.tableName} ({String.Join(", ", _parameters.Keys.Select(x => $"[{x}]"))})");
        if (outputPrimaryKey != "") { sb.AppendLine($"OUTPUT INSERTED.[{outputPrimaryKey}]"); }
        sb.AppendLine($"VALUES ({String.Join(", ", _parameters.Keys.Select(x => $"@{x}"))})");
        return sb.ToString();
    }
    public string InsertQuery() => this.insertquery_private("");
    public string InsertWithOutput()
    {
        if (!_try.TryTableisKeyAttribute(typeof(T), out string[] _keynames)) { throw new MissingPrimaryKeyException($"\"{typeof(T).Name}\" içerisinde primarykey propertyisinde \"{nameof(KeyAttribute)}\" bulunamadı!"); }
        if (_keynames.Length == 1) { return this.insertquery_private(_keynames[0]); }
        throw new Exception("Composite Key olan tablolarda işleme devam edilemez!");
    }
    public string UpdateQuery()
    {
        Guard.CheckEmpty(this.whereClause, nameof(this.whereClause));
        Guard.CheckEmpty(_parameters.Keys, nameof(_parameters));
        return String.Join(" ", "UPDATE", tableName, "SET", String.Join(", ", _parameters.Keys.Select(x => $"[{x}] = @{x}")), this.whereClause);
    }
    public string DeleteQuery()
    {
        Guard.CheckEmpty(this.whereClause, nameof(this.whereClause));
        return String.Join(" ", "DELETE FROM", tableName, whereClause);
    }
}
************************
public class CYoksis_TesvikBeyanTypes : BaseEnum<CYoksis_TesvikBeyanTypes.Yoksis_TesvikBeyanTypes>
{
    /*
       ESER_TUR	ESER_TUR_AD	     ESER_ID
       1	    PROJE	         getirProjeListesi methodundaki tablo id
       2	    ARAŞTIRMA	     getArastirmaSertifkaBilgisiV1 methodundaki tablo id
       3	    (YAYIN)MAKALE	 getMakaleBilgisiV1 methodundaki tablo id
       3	    (YAYIN)KITAP	 getKitapBilgisiV1 methodundaki tablo id
       3	    (YAYIN)EDITORLUK getEditorlukBilgisiV1 methodundaki tablo id
       4	    TASARIM	         getTasarimBilgisiV1 methodundaki tablo id
       5	    SERGI / KAYIT	 getSanatsalFaalV1 methodundaki tablo id
       6	    PATENT	         getPatentBilgisiV1 methodundaki tablo id
       7	    ATIF	         getAtifSayilariV1 methodundaki tablo id
       8	    TEBLİĞ	         getBildiriBilgisiV1 methodundaki tablo id
       9	    ÖDÜL	         getOdulListesiV1 methodundaki tablo id 
    */
    public enum Yoksis_TesvikBeyanTypes : byte
    {
        [Description("Proje")]
        proje = 1,
        [Description("Araştırma")]
        arastirma,
        [Description("Yayın")]
        yayin,
        [Description("Tasarım")]
        tasarim,
        [Description("Sergi")]
        sergi,
        [Description("Patent")]
        patent,
        [Description("Atıf")]
        atif,
        [Description("Tebliğ")]
        teblig,
        [Description("Ödül")]
        odul
    }
}
public enum ArsKrsSrtfk_TurTypes : byte // yöksis son kontrol tarihi: 15.11.2021, 09.06.2023
{
    [Description("Sertifika")]
    srtfk = 1,
    [Description("Kurs")]
    krs = 2,
    [Description("Araştırma")]
    ars = 3,
    [Description("Çalışma")]
    cls = 4,
    [Description("Rapor")]
    rpr = 5,
    [Description("Çalıştay")]
    clsty = 6,
    [Description("Röportaj")]
    rprtj = 7,
    [Description("Deneme")]
    dnm = 8,
    [Description("Değerlendirme")]
    dgrlndrm = 9,
    [Description("Sohbet Yazısı")]
    shbt = 10,
    [Description("Tercüme")]
    trcm = 11,
    [Description("Seminer")]
    smnr = 12,
    [Description("Konuşmalarım")]
    knsm = 13,
    [Description("Kongre Düzenleme")]
    kngr = 14,
    [Description("Ürün")]
    urn = 15,
    [Description("Burs")]
    brs = 16,
    [Description("Bilimsel Hazırlık")]
    blmhzr = 17
}
public enum Art_TurTypes : byte // yöksis son kontrol tarihi: 15.11.2021, 09.06.2023
{
    [Description("Kayıt (Ses ve/veya Görüntü)")]
    kayit = 1,
    [Description("Sergi")]
    sergi = 2,
    [Description("Diğer")]
    diger = 3,
    [Description("Bienal")]
    bienal = 4, // yöksiste seçilemiyor
    [Description("Trienal")]
    trienal = 5, // yöksiste seçilemiyor
    [Description("Gösteri")]
    gosteri = 6, // yöksiste seçilemiyor
    [Description("Dinleti")]
    dinleti = 7, // yöksiste seçilemiyor
    [Description("Festival")]
    festival = 8, // yöksiste seçilemiyor
    [Description("Gösterim")]
    gosterim = 9 // yöksiste seçilemiyor
}
public enum Article_TurTypes : byte // yöksis son kontrol tarihi: 15.11.2021, 09.06.2023
{
    [Description("Özgün Makale")]
    ozgun = 1,
    [Description("Teknik Not")]
    tekniknot = 2,
    [Description("Yorum")]
    yorum = 3,
    [Description("Vaka Takdimi")]
    vaka = 4,
    [Description("Editöre Mektup")]
    edtrmektup = 5,
    [Description("Özet")]
    ozet = 6,
    [Description("Kitap Kritiği")]
    kitapkritigi = 7,
    [Description("Araştırma Notu")]
    arasirmanotu = 8,
    [Description("Bilirkişi Raporu vb.")]
    bilirkisi = 9,
    [Description("Derleme Makale")]
    derleme = 10,
    [Description("Kısa Makale")]
    kisa = 11,
    [Description("Tartışma")]
    tartisma = 12
}
public enum Book_KatkiDuzeyTypes : byte // yöksis son kontrol tarihi: 15.11.2021, 09.06.2023
{
    [Description("Kitap")]
    tumu = 0,
    [Description("Kitap Bölümü")]
    bolum = 1
}
public enum Book_TurTypes : byte // yöksis son kontrol tarihi: 15.11.2021, 09.06.2023
{
    [Description("Bilimsel Kitap")]
    bilimsel = 25,
    [Description("Ders Kitabı")]
    ders = 26,
    [Description("Ansiklopedi Maddesi")]
    ansik = 28,
    [Description("Kitap Tercümesi")]
    kitapter = 29,
    [Description("Araştırma (Tez Hariç) Kitabı")]
    arstm = 43 // yöksiste seçilemiyor
}
public enum Editor_GorevTypes : byte // yöksis son kontrol tarihi: 15.11.2021, 09.06.2023
{
    [Description("Editör")]
    edtr = 0,
    [Description("Yrd. Editör")]
    yrdedtr = 1,
    [Description("Konuk Editör")]
    konukedtr = 2,
    [Description("Yayın Kurulu Üyeliği")]
    yayinkurulu = 3,
    [Description("Editor Kurulu Üyeliği")]
    edtrkurulu = 4, // yöksiste seçilemiyor
    [Description("Baş Editör")]
    basedtr = 5 // yöksiste seçilemiyor
}
public enum Editor_TurTypes : byte // yöksis son kontrol tarihi: 15.11.2021, 09.06.2023
{
    [Description("Dergi")]
    drg = 1,
    [Description("Kitap")]
    ktp = 2,
    [Description("Diğer Yayınlar")]
    diger = 3,
    [Description("Kitap (Çeviri)")]
    ktpcvr = 4
}
public enum EndeksTypes : byte // yöksis son kontrol tarihi: 15.11.2021, 09.06.2023
{
    [Description("SSCI")]
    ssci = 5,
    [Description("SCI-Expanded")]
    sciexpanded = 6,
    [Description("AHCI")]
    ahci = 7,
    [Description("Alan endeksleri")]
    alan = 8,
    [Description("Diğer endeksler")]
    diger = 9,
    [Description("SCI")]
    sci = 40,
    [Description("Endekste Taranmıyor")]
    trmy = 42,
    [Description("TR DİZİN")]
    tr = 45,
    [Description("EBSCO")]
    ebsco = 46, // yöksiste seçilemiyor
    [Description("Index Islamicus")]
    idxislm = 47, // yöksiste seçilemiyor
    [Description("IM: Index Medicus")]
    im = 48,
    [Description("DI: Dental Index")]
    di = 49,
    [Description("EI: Engineering Index")]
    ei = 50,
    [Description("CMCI: CompuMath Citation Index")]
    cmci = 51,
    [Description("Australian Education Index")]
    australian = 53,
    [Description("British Education Index")]
    british = 54,
    [Description("Journals Indexed in Eric")]
    journals = 55,
    [Description("ESCI")]
    esci = 56, // yöksiste seçilemiyor
    [Description("IC:Index Chemicus")]
    ic = 59,
    [Description("The Avery Index to Architectural Periodicals")]
    avery = 60,
    [Description("DAAI (Design and Applied Arts Index)")]
    daai = 61,
    [Description("Art Index (Art Research Database, EBSCO)")]
    artindex = 62,
    [Description("ICONDA (The International Construction Database)")]
    iconda = 63,
    [Description("Ergonomics Abstracts (Ergo-Abs)")]
    ergonomics = 64,
    [Description("Education Full Text (H. W. Wilson) Database Covarage List")]
    education = 65
}
public enum HakemTypes : byte
{
    [Description("Hakemli")]
    hakemli = 0,
    [Description("Hakemsiz")]
    hakemsiz = 1
}
public enum Idari_TurTypes : byte // yöksis son kontrol tarihi: 15.11.2021, 09.06.2023
{
    [Description("Ana Bilim Dalı Başkanı")]
    abdbsk = 1,
    [Description("Bölüm Başkanı")]
    bolumbsk = 2,
    [Description("Enstitü Müdür Yardımcısı")]
    ensmdryrdm = 3,
    [Description("MYO/Yüksekokul Müdür Yardımcısı")]
    myoyukmdryrdm = 4,
    [Description("Konservatuvar Müdür Yardımcısı")]
    konsbdryrdm = 5,
    [Description("Enstitü Müdürü")]
    ensmdr = 6,
    [Description("MYO/Yüksekokul Müdürü")]
    myoyukmdr = 7,
    [Description("Konservatuvar Müdürü")]
    konsmdr = 8,
    [Description("Başhekim Yardımcısı")]
    bashekimyrdm = 9,
    [Description("Başhekim")]
    bashekim = 10,
    [Description("Arş. Uyg. Merkezi Müdürü")]
    arsuygmerkezimdr = 11,
    [Description("Dekan Yardımcısı")]
    dekanyrdm = 12,
    [Description("Dekan")]
    dekan = 13,
    [Description("Rektör Yardımcısı")]
    rektoryrdm = 14,
    [Description("Rektör")]
    rektor = 15,
    [Description("YÖK Denetleme Kurulu Üyesi")]
    yokdenkuruluuye = 16,
    [Description("YÖK Denetleme Kurulu Başkanı")]
    yokdenkurulubsk = 17,
    [Description("YÖK Üyesi")]
    yokuye = 18,
    [Description("YÖK Başkanı")]
    yokbsk = 19,
    [Description("Fakülte Sekreteri")]
    faksekreteri = 20,
    [Description("Bölüm Başkan Yardımcısı")]
    bolumbskyrdm = 21,
    [Description("Genel Sekreter")]
    genelsekreter = 22,
    [Description("Bek Başkanı")]
    bekbsk = 23,
    [Description("Program Başkanı")]
    probsk = 24,
    [Description("Genel Sekreter Yardımcısı")]
    genelsekreteryrdm = 28,
    [Description("Arş. Uyg. Merkezi Müdür Yardımcısı")]
    arsuygmerkezimdryrdm = 29,
    [Description("Farabi Koordinatörü")]
    farabi = 30,
    [Description("Yabancı Diller Birim Koordinatörü")]
    yabdilbrmkoor = 32,
    [Description("Eğitim Koordinatörü")]
    egitimkoor = 33,
    [Description("Bilim Dalı Başkanı")]
    bilimdalibsk = 34,
    [Description("Erasmus Koordinatörü")]
    erasmus = 35,
    [Description("Mevlana Değişim Programı Kurum Koordinatörü")]
    mevlana = 36,
    [Description("Bilimsel Araştırmalar Projeleri Koordinasyon Birimi Koordinatörü")]
    bilarsprokoorbrmkoord = 37,
    [Description("Bologna Koordinatörü")]
    bolognakoord = 38,
    [Description("Komisyon Başkanlığı")]
    komisyonbsk = 39,
    [Description("Fakülte Yönetim Kurulu Üyeliği")]
    fakyonkrluye = 40,
    [Description("Enstitü Yönetim Kurulu üyeliği")]
    ensyonkrluye = 41,
    [Description("Komisyon Üyeliği")]
    komisyonuye = 42,
    [Description("Yönetim Kurulu Üyeliği")]
    yonkrluye = 43,
    [Description("Rektör Danışmanı")]
    rektordan = 44,
    [Description("Diploma Teyidi Sorumlusu")]
    dipteysorumlusu = 45,
    [Description("ÖYP Koordinatörü")]
    oypkoord = 46,
    [Description("ÖYP Sorumlusu")]
    oypsorumlusu = 47,
    [Description("Daire Başkanı")]
    dairebsk = 48,
    [Description("Uzman")]
    uzman = 49,
    [Description("Uzman Yardımcısı")]
    uzmanyrdm = 51,
    [Description("Diğer")]
    diger = 52,
    [Description("Fakülte Kurulu Üyeliği")]
    fakkrluye = 53,
    [Description("Ana Sanat Dalı Başkanı")]
    anasanatdalibsk = 54,
    [Description("Uhde")]
    uhde = 55,
    [Description("Kalite Kurulu Üyeliği")]
    kalitekrluye = 56,
    [Description("Engelli Birim Sorumlusu")]
    engbrmsorumlusu = 57,
    [Description("YÖK Bursları Takip Şubesi Sorumlusu")]
    yokbrstakipsubesorumlusu = 58
}
public enum Idari_YerDurumTypes : byte
{
    [Description("Yurt içi")]
    ic = 0,
    [Description("Yurt dışı")]
    dis = 1
}
public enum KapsamTypes : byte // yöksis son kontrol tarihi: 15.11.2021, 09.06.2023
{
    [Description("Ulusal")]
    ulusal = 0,
    [Description("Uluslararasi")]
    uluslararasi = 1
}
public enum Lesson_TurTypes : byte // yöksis son kontrol tarihi: 15.11.2021, 09.06.2023
{
    [Description("Önlisans")]
    onlisans = 1,
    [Description("Lisans")]
    lisans = 2,
    [Description("Yüksek Lisans")]
    yukseklisans = 3,
    [Description("Doktora")]
    doktora = 4,
    [Description("Hazırlık")]
    hazirlik = 5,
    [Description("Tıpta Uzmanlık")]
    tip = 6,
    [Description("Diş Hekimliğinde Uzmanlık")]
    dis = 7,
    [Description("Eczacılıkta Uzmanlık")]
    eczaci = 8,
    [Description("Sanatta Yeterlilik")]
    sanat = 9,
    [Description("Veteriner Hekimlikte Uzmanlık")]
    veteriner = 10
}
public enum Member_KurulusDurumTypes : byte // yöksis son kontrol tarihi: 15.11.2021, 09.06.2023
{
    [Description("Bilimsel Kuruluş")]
    bilimsel = 0,
    [Description("Diğer")]
    diger = 1
}
public enum Member_TurTypes : byte // yöksis son kontrol tarihi: 15.11.2021, 09.06.2023
{
    [Description("Üye")]
    uye = 1,
    [Description("Danışman")]
    danisman = 2,
    [Description("Onursal Başkan")]
    onursalbsk = 3,
    [Description("Yönetim Kurulu Üyesi")]
    yonkrluye = 4,
    [Description("Başkan")]
    bsk = 5,
    [Description("Başkan Yardımcısı")]
    bskyrd = 6
}
public enum Patent_DosyaTypes : byte // yöksis son kontrol tarihi: 15.11.2021, 09.06.2023
{
    [Description("Patent")]
    patent = 0,
    [Description("Faydalı Model")]
    faydali = 1,
    [Description("Ek Patent")]
    ekpatent = 2,
    [Description("Diğer")]
    diger = 3
}
public enum Patent_KapsamTypes : byte // yöksis son kontrol tarihi: 09.06.2023
{
    [Description("Uluslararasi")]
    uluslararasi = 0,
    [Description("Ulusal")]
    ulusal = 1,
    [Description("Üçlü (triadic)")]
    uclu = 2
}
public enum Patent_TurTypes : byte // yöksis son kontrol tarihi: 15.11.2021, 09.06.2023
{
    [Description("Section A - Human Necessities")]
    sca = 0,
    [Description("Section B - Performing operations; Transporting")]
    scb = 1,
    [Description("Section C - Chemistry; Metallurgy")]
    scc = 2,
    [Description("Section D - Textiles")]
    scd = 3,
    [Description("Section E - Fixed Constructions")]
    sce = 4,
    [Description("Section F - Mechanical Engineering; Lighting; Heat")]
    scf = 5,
    [Description("Section G - Physics")]
    scg = 6,
    [Description("Section H - Electricity")]
    sch = 7
}
public enum Prize_FaalDetayTypes : byte // yöksis son kontrol tarihi: 15.11.2021, 09.06.2023
{
    [Description("TÜRKİYE BİLİMLER AKADEMİSİ (TÜBA)'dan alınan ödül")]
    tba = 1, // yöksiste seçilemiyor
    [Description("TÜBİTAK'tan alınan ödül")]
    tubi = 2, // yöksiste seçilemiyor
    [Description("Alanında yurtdışı kurum veya kuruluşlardan alınan ödül")]
    alnyurtdisi = 3, // yöksiste seçilemiyor
    [Description("Alanında yurtiçi kamu kurum ve kuruluşlarından alınan ödül")]
    alnyurtici = 4, // yöksiste seçilemiyor
    [Description("Uluslararası BSE")]
    ulslarbse = 5, // yöksiste seçilemiyor
    [Description("Ulusal BSE")]
    ulsbse = 6, // yöksiste seçilemiyor
    [Description("Alanında özel kurum ve kuruluşlarından alınan ödül")]
    alnozel = 7, // yöksiste seçilemiyor
    [Description("TÜBA Akademi Ödülü")]
    tubaaka = 8,
    [Description("TÜBA-GEBİP")]
    tubagebip = 9,
    [Description("TÜBA-TESEP")]
    tubatesep = 10,
    [Description("YÖK Yılın Doktora tezi Ödülü")]
    yokylndktrtezi = 11,
    [Description("TÜBİTAK Bilim Ödülü")]
    tubibilim = 12,
    [Description("TÜBİTAK TWAS")]
    tubitwas = 13,
    [Description("TÜBİTAK TEŞVİK")]
    tubitesvik = 14,
    [Description("TÜBİTAK Ufuk 2020 Eşik Üstü Ödülü")]
    tubiufuk = 15,
    [Description("Yurtdışı kurum veya kuruluşlardan alınan bilim ödülü")]
    yurtdisi = 16,
    [Description("Yurtiçi kurum ve kuruluşlarından alınan bilim ödülü")]
    yurtici = 17,
    [Description("Ulusal güzel sanat etkinliklerinde veya yarışmalarında verilen derece ödülü")]
    ulsgzlsnt = 18,
    [Description("Uluslararası güzel sanat etkinliklerinde veya yarışmalarında verilen derece ödülü")]
    ulsargzlsnt = 19,
    [Description("Mimarlık, Planlama ve Tasarım alanındaki derece ödülü")]
    mmrlk = 20,
    [Description("Diğer")]
    diger = 21,
    [Description("TÜSEB PROJESİ")]
    tuseb = 22
}
public enum Prize_IsYeriTurTypes : byte // yöksis son kontrol tarihi: 15.11.2021, 09.06.2023
{
    [Description("Üniversite")]
    uni = 16,
    [Description("Kamu")]
    kamu = 17,
    [Description("Sivil Toplum Kuruluşu")]
    sivil = 18,
    [Description("Ticari (Özel)")]
    ticariozel = 19,
    [Description("Ticari (KİT)")]
    ticarikit = 20,
    [Description("Hastane")]
    hastane = 21,
    [Description("Diğer")]
    diger = 22,
    [Description("Avrupa Birliği")]
    ab = 23,
    [Description("Yurtdışı Üniversite")]
    yurtdisiuni = 24,
    [Description("Mesleki Dernekler")]
    dernek = 25
}
public enum Prize_TurTypes : byte // yöksis son kontrol tarihi: 15.11.2021, 09.06.2023
{
    [Description("Çalışma")]
    calisma = 1,
    [Description("Proje")]
    proje = 2,
    [Description("Yayın Teşvik")]
    yayintesvik = 3,
    [Description("Hizmet")]
    hizmet = 4,
    [Description("Bilim - Sanat")]
    bilimsanat = 5,
    [Description("Teşvik")]
    tesvik = 6,
    [Description("Grup Başarı")]
    grupbasari = 7,
    [Description("Genç Bilim ve Sanat İnsanı")]
    genc = 10,
    [Description("Diğer")]
    diger = 11
}
public enum Proceeding_SunumTypes : byte // yöksis son kontrol tarihi: 15.11.2021, 09.06.2023
{
    [Description("Sözlü Sunum")]
    sozlu = 33,
    [Description("Poster")]
    poster = 38,
    [Description("Davetli Konuşmacı")]
    davetli = 39
}
public enum Proceeding_TurTypes : byte // yöksis son kontrol tarihi: 15.11.2021, 09.06.2023
{
    [Description("Sözlü Bildiri")]
    sanno = 33, // yöksiste seçilemiyor
    [Description("Tam metin bildiri")]
    metin = 36,
    [Description("Özet bildiri")]
    ozet = 37,
    [Description("Poster")]
    poster = 38, // yöksiste seçilemiyor
    [Description("Davetli Konuşmacı")]
    davetli = 39 // yöksiste seçilemiyor
}
public enum Project_DurumTypes : byte // yöksis son kontrol tarihi: 15.11.2021, 09.06.2023
{
    [Description("Tamamlandı")]
    ok = 1,
    [Description("Devam Ediyor")]
    devam = 2,
    [Description("Ertelendi")]
    ertelendi = 3,
    [Description("Beklemede")]
    beklemede = 4
}
public enum Project_KonumTypes : byte // yöksis son kontrol tarihi: 15.11.2021, 09.06.2023
{
    [Description("Yönetici")]
    yonetici = 1,
    [Description("Danışman")]
    danisman = 2,
    [Description("Proje Koordinatörü")]
    projekoord = 3,
    [Description("Uzman")]
    uzman = 5,
    [Description("Araştırmacı")]
    arastirmaci = 6,
    [Description("Bursiyer")]
    bursiyer = 7,
    [Description("Eğitmen")]
    egitmen = 8,
    [Description("Proje Koordinatör Yrd.")]
    projekoordyrd = 9,
    [Description("Proje Hakemliği")]
    projehakem = 10,
    [Description("Proje İzleyiciliği")]
    projeizl = 11,
    [Description("Yürütücü")]
    yurutucu = 12,
    [Description("Yardımcı Personel")]
    yrdper = 15
}
public enum Project_ParaBirimiTypes : byte // yöksis son kontrol tarihi: 15.11.2021, 09.06.2023
{
    [Description("Türk Lirası")]
    tl = 1,
    [Description("Dolar")]
    dolar = 2,
    [Description("Avro")]
    euro = 3,
    [Description("GBP")]
    gbp = 4
}
public enum Project_TurTypes : byte // yöksis son kontrol tarihi: 15.11.2021, 09.06.2023
{
    [Description("TÜBİTAK PROJESİ")]
    tubipro = 2,
    [Description("Avrupa Birliği")]
    ab = 3, // yöksiste seçilemiyor
    [Description("Sanayi Bakanlığı (SAN-TEZ) PROJESİ")]
    sanayibkn = 7,
    [Description("ARAŞTIRMA PROJESİ")]
    arstrmpro = 8,
    [Description("Dünya Bankası")]
    dunyabankasi = 9, // yöksiste seçilemiyor
    [Description("Avrupa Konseyi")]
    avrkonsey = 10, // yöksiste seçilemiyor
    [Description("Diğer Resmi Kurum ve Kuruluşlar")]
    digerresmi = 11, // yöksiste seçilemiyor
    [Description("Kalkınma Bakanlığı")]
    kalkinmabkn = 12,
    [Description("Yükseköğretim Kurumları tarafından destekli bilimsel araştırma projesi")]
    ykskdestek = 14,
    [Description("Diğer kamu kuruluşları (Yükseköğretim Kurumları hariç)")]
    digerkamu = 15,
    [Description("Özel Kuruluşlar")]
    ozel = 16,
    [Description("TÜBA")]
    tuba = 17,
    [Description("Diğer (Uluslararası)")]
    digerulsar = 18, // yöksiste seçilemiyor
    [Description("Diğer (Ulusal)")]
    diger = 19,
    [Description("Tübitak 1001")]
    tubi1001 = 20,
    [Description("Tübitak 1002")]
    tubi1002 = 21,
    [Description("Tübitak 1003")]
    tubi1003 = 22,
    [Description("Tübitak 1005")]
    tubi1005 = 23,
    [Description("Tübitak 1505")]
    tubi1505 = 24,
    [Description("Tübitak 3001")]
    tubi3001 = 25,
    [Description("Tübitak 3501")]
    tubi3501 = 26,
    [Description("COST")]
    cost = 27, // yöksiste seçilemiyor
    [Description("Uluslararası İkili İşbirliği Programları")]
    ulsarprog = 28, // yöksiste seçilemiyor
    [Description("H2020")]
    h2020 = 29, // yöksiste seçilemiyor
    [Description("Tübitak 1004")]
    tubi1004 = 30,
    [Description("Tübitak 1007")]
    tubi1007 = 31,
    [Description("Tübitak 2244")]
    tubi2244 = 32,
    [Description("Tübitak Sayem")]
    tubisayem = 33,
    [Description("TÜSEB")]
    tuseb = 34,
    [Description("Tübitak 3005")]
    tubi3005 = 35,
    [Description("Tübitak 1512")]
    tubi1512 = 36,
    [Description("Tübitak 1511")]
    tubi1511 = 38
}
public enum Tasarim_TurDetayTypes : byte // yöksis son kontrol tarihi: 15.11.2021, 09.06.2023
{
    [Description("Kamu kurumları ile özel hukuk tüzel kişileri bünyesinde uygulamaya konmuş")]
    kmm = 1,
    [Description("Bilimsel yayınla tescillenmiş")]
    blmsl = 2,
    [Description("Diğer")]
    diger = 3,
    [Description("TSE/TPE tarafından tescillenmiş")]
    tse = 4
}
public enum Tasarim_TurTypes : byte // yöksis son kontrol tarihi: 15.11.2021, 09.06.2023
{
    [Description("Sanatsal Tasarım (Bina, Çevre, Eser, Yayın, Mekan, Obje)")]
    sntsl = 1,
    [Description("Bilimsel Tasarım")]
    blmsl = 2,
    [Description("Faydalı Obje")]
    fydl = 3,
    [Description("Endüstriyel Tasarım")]
    endstryl = 4,
    [Description("Çevresel Tasarım (bina, peyzaj ve iç mekan)")]
    cvrsl = 5,
    [Description("Grafiksel Tasarım")]
    grfksl = 6,
    [Description("Sahne Tasarım")]
    shn = 7,
    [Description("Moda Tasarımı (Kumaş, aksesuar veya giysi)")]
    moda = 8,
    [Description("Çalgı Tasarımı")]
    clg = 9,
    [Description("Yazılım")]
    yzlm = 10
}
public enum Thesis_DurumTypes : byte // yöksis son kontrol tarihi: 15.11.2021, 09.06.2023
{
    [Description("Devam Ediyor")]
    devam = 0,
    [Description("Tamamlandı")]
    ok = 1
}
public enum Thesis_TurTypes : byte // yöksis son kontrol tarihi: 15.11.2021, 09.06.2023
{
    [Description("Yüksek Lisans")]
    yl = 1,
    [Description("Doktora")]
    doktora = 2,
    [Description("Tıpta Uzmanlık")]
    tip = 3,
    [Description("Sanatta Yeterlilik")]
    sanat = 4,
    [Description("Diş Hekimliği Uzmanlık")]
    dis = 5,
    [Description("Tıpta Yan Dal Uzmanlık")]
    tipyandal = 6,
    [Description("Eczacılıkta Uzmanlık")]
    ecz = 7
}
public enum ViewAuthor_TurTypes : byte // yöksis son kontrol tarihi: 15.11.2021, 09.06.2023
{
    [Description("Önlisans")]
    onlisans = 1,
    [Description("Lisans-Anadal")]
    li_anadal = 2,
    [Description("Lisans-ÇiftAnadal")]
    li_cifanadal = 3,
    [Description("Lisans-Yandal")]
    li_yandal = 4,
    [Description("Yüksek Lisans-Tezli")]
    yli_tezli = 5,
    [Description("Yüksek Lisans-Tezsiz")]
    yli_tezsiz = 6,
    [Description("Yüksek Lisans-İkinci Öğretim Tezsiz")]
    yli_ikiogrtezsiz = 7,
    [Description("Bütünleşik Doktora")]
    btndoktra = 8,
    [Description("Sanatta Yeterlik")]
    sntytrlilik = 9,
    [Description("Doktora")]
    doktora = 10,
    [Description("Tıpta Uzmanlık")]
    tip_uzmn = 11,
    [Description("Tıpta Yandal Uzmanlık")]
    tip_yandaluzmn = 12,
    [Description("Post-Doktora")]
    postdoktora = 13,
    [Description("Eczacılıkta Uzmanlık")]
    ecz = 14,
    [Description("Diş Hekimliğinde Uzmanlık")]
    dis = 15,
    [Description("Doğrudan Doktora")]
    dogdoktora = 16
}
************************
public async Task<List<dynamic>> QueryRawDynamicAsync(string query, CommandType commandType, CommandBehavior commandBehavior, int? commandTimeout, object parameters = null)
{
    using (var cmd = this.DbConnection.CreateCommand())
    {
        var transaction = this.Context.Database.CurrentTransaction;
        cmd.CommandText = query;
        cmd.CommandType = commandType;
        if (transaction != null) { cmd.Transaction = transaction?.GetDbTransaction(); }
        if (commandTimeout.HasValue) { cmd.CommandTimeout = commandTimeout.Value; }
        if (parameters != null)
        {
            foreach (var p in _to.ToSqlParameterFromObject(parameters))
            {
                var db = cmd.CreateParameter();
                db.ParameterName = p.ParameterName;
                db.Value = p.Value ?? DBNull.Value;
                cmd.Parameters.Add(db);
            }
        }
        try
        {
            var r = new List<dynamic>();
            if (cmd.Connection.State != ConnectionState.Open) { await cmd.Connection.OpenAsync(); }
            using (var dr = await cmd.ExecuteReaderAsync(commandBehavior))
            {
                if (dr != null && dr.HasRows)
                {
                    int i, fc = dr.FieldCount;
                    object value;
                    while (await dr.ReadAsync())
                    {
                        var e = new ExpandoObject() as IDictionary<string, object>;
                        for (i = 0; i < fc; i++)
                        {
                            value = dr[i];
                            e.Add(dr.GetName(i), ((value == null || value == DBNull.Value) ? default : value));
                        }
                        r.Add(e);
                    }
                }
            }
            return r;
        }
        catch { throw; }
        finally { if (transaction == null && cmd.Connection.State != ConnectionState.Closed) { await cmd.Connection.CloseAsync(); } }
    }
}
************************
/// <summary>
/// HTML içeriğini sanitize ederek temizleyen özel bir doğrulama özniteliği.
/// Bu öznitelik, verilen değeri HTML içeriğinden arındırmak için kullanılabilir.
/// <remarks>
/// XSS örnekleri için <a href="https://github.com/payloadbox/xss-payload-list">buraya</a> tıklayarak resmi dokümantasyona ulaşabilirsiniz.
/// </remarks>
/// </summary>
[AttributeUsage(AttributeTargets.Property | AttributeTargets.Parameter, AllowMultiple = false)]
public sealed class Validation_HtmlSanitizerAttribute : ValidationAttribute
{
    /// <summary>
    /// Varsayılan kurucu metod.
    /// </summary>
    public Validation_HtmlSanitizerAttribute() { }
    /// <summary>
    /// Belirtilen değeri XSS (Cross-Site Scripting) tehditlerine karşı temizlemek ve gerekli doğrulamaları yapmak için kullanılan bir doğrulama attribute metodudur.
    /// </summary>
    /// <param name="value">Doğrulama yapılacak değer.</param>
    /// <param name="validationContext">Doğrulama işleminin bağlamını (context) sağlayan <see cref="ValidationContext"/> nesnesi.</param>
    /// <returns>
    /// Değer başarılı şekilde doğrulanırsa <see cref="ValidationResult.Success"/> döner, 
    /// aksi halde XSS tehdidi algılanan ve zorunlu alan kurallarına uymayan durumlarda bir <see cref="ValidationResult"/> döner.
    /// </returns>
    /// <remarks>
    /// - İlk olarak &quot;value&quot; değişkenini bir string&#39;e dönüştürür ve temizleme işlemi yapar.
    /// - Eğer değer zorunlu bir alan olarak işaretlenmişse ve temizlenmiş hali boşsa, XSS tehdidi mesajıyla birlikte bir doğrulama hatası döner.
    /// - Temizlenen değer, doğrulamanın yapıldığı property&#39;ye set edilir.
    /// </remarks>
    protected override ValidationResult IsValid(object value, ValidationContext validationContext)
    {
        var _value = value.ToStringOrEmpty();
        var sanitize = _value.ReplaceSanitize(false); // Not: ReplaceSanitize(false) ?? "" yazılmamalı, null türünde olmalı, çünkü set edilmekte
        if (validationContext.IsRequiredAttribute() && sanitize.IsNullOrEmpty_string() && _value != "") { return new ValidationResult(this.ErrorMessage ?? $"{validationContext.DisplayName}, içerisinde \"{_title.xss}\" saldırılarına karşı bir tehdit algılandı!", new List<string> { validationContext.MemberName }); }
        validationContext.SetValidatePropertyValue(sanitize);
        return ValidationResult.Success;
    }
}
************************
public sealed class InfoResult
{
    /// <summary>
    /// İstisna mesajını temsil eder.
    /// </summary>
    public string message { get; set; }
    /// <summary>
    /// İstisnanın kaynağını temsil eder.
    /// </summary>
    public string source { get; set; }
    /// <summary>
    /// Varsayılan bir mesaj ve kaynak ile başlatılır.
    /// </summary>
    public InfoResult() : this("", "") { }
    /// <summary>
    /// Belirtilen mesaj ve kaynak ile başlatılır.
    /// </summary>
    /// <param name="message">İstisna mesajı.</param>
    /// <param name="source">İstisna kaynağı.</param>
    public InfoResult(string message, string source)
    {
        this.message = message;
        this.source = source;
    }
    /// <summary>
    /// value için tanımlanan nesneler: InfoResult, IFormCollection, AnonymousObjectClass
    /// </summary>
    public static InfoResult ToEntityFromObject(object value)
    {
        if (value == null) { return new InfoResult(); }
        if (value is InfoResult _t) { return _t; }
        if (value is IFormCollection _form)
        {
            return ToEntityFromObject(new
            {
                message = _form.ToKeyValueParseOrDefault_formcollection<string>(nameof(message)) ?? "",
                source = _form.ToKeyValueParseOrDefault_formcollection<string>(nameof(source)) ?? ""
            });
        }
        return value.ToEnumerable().Select(x => x.ToDynamic()).Select(x => new InfoResult((string)x.message, (string)x.source)).FirstOrDefault();
    }
}
************************
public sealed class LogExceptionResult
{
    /// <summary>
    /// İstisna hakkında bilgileri tutan dizi.
    /// </summary>
    public InfoResult[] info { get; set; }
    /// <summary>
    /// İstisnanın gerçekleştiği yerleri tutan dizi.
    /// </summary>
    public PageResult[] page { get; set; }
    /// <summary>
    /// Varsayılan değerlerle başlatılır.
    /// </summary>
    public LogExceptionResult() : this(default, default) { }
    /// <summary>
    /// Belirtilen &#39;info&#39; ve &#39;page&#39; değerleriyle başlatılır.
    /// </summary>
    /// <param name="info">İstisna bilgilerini içeren dizi.</param>
    /// <param name="page">İstisnanın gerçekleştiği yerleri içeren dizi.</param>
    public LogExceptionResult(object[] info, object[] page)
    {
        this.info = (info ?? Array.Empty<object>()).Select(InfoResult.ToEntityFromObject).ToArray();
        this.page = (page ?? Array.Empty<object>()).Select(PageResult.ToEntityFromObject).ToArray();
    }
    /// <summary>
    /// value için tanımlanan nesneler: LogExceptionResult, String(JTokenType.Object türünde), JObject, AnonymousObjectClass
    /// </summary>
    public static LogExceptionResult ToEntityFromObject(object value)
    {
        if (value == null) { return new LogExceptionResult(); }
        if (value is LogExceptionResult _l) { return _l; }
        if (value is String _s)
        {
            try
            {
                if (_try.TryJson(_s, JTokenType.Object, out JObject _sjo)) { return ToEntityFromObject(_sjo); }
                return new LogExceptionResult();
            }
            catch { return new LogExceptionResult(); }
        }
        if (value is JObject _jo)
        {
            try
            {
                return ToEntityFromObject(new
                {
                    info = _jo[nameof(info)].ToEnumerable().Select(x => (x != null && x.Type == JTokenType.Array) ? x.ToObject<InfoResult[]>() : Array.Empty<InfoResult>()).FirstOrDefault(),
                    page = _jo[nameof(page)].ToEnumerable().Select(x => (x != null && x.Type == JTokenType.Array) ? x.ToObject<PageResult[]>() : Array.Empty<PageResult>()).FirstOrDefault()
                });
            }
            catch { return new LogExceptionResult(); }
        }
        return value.ToEnumerable().Select(x => x.ToDynamic()).Select(x => new LogExceptionResult((object[])x.info, (object[])x.page)).FirstOrDefault();
    }
    /// <summary>
    /// Verilen istisna hakkında bilgi içeren bir nesne döner.
    /// </summary>
    /// <param name="exception">İşlem yapılacak istisna.</param>
    /// <param name="ishtmlencodingrequired">HTML kodlamasının gerekip gerekmediğini belirtir.</param>
    /// <returns>İstisna bilgilerini içeren nesne.</returns>
    public static LogExceptionResult Create(Exception exception, bool ishtmlencodingrequired)
    {
        var exall = exception.AllException();
        var sfs = new List<StackFrame>();
        var s = 0;
        var stc = new StackTrace(exall.Peek(), true);
        while (true)
        {
            if (stc.GetFrame(s) != null) { sfs.Add(stc.GetFrame(s)); }
            else { break; }
            s++;
        }
        return new LogExceptionResult(exall.Select(x => new InfoResult(ishtmlencodingrequired ? HttpUtility.HtmlEncode(x.Message) : x.Message, x.Source ?? "")).ToArray(), sfs.Where(x => x.GetFileLineNumber() > 0).Select(PageResult.ToEntityFromObject).ToArray());
    }
    /// <summary>
    /// Hata mesajlarını kullanarak yeni bir <see cref="LogExceptionResult"/> oluşturur.
    /// Eğer <paramref name="errors"/> parametresi boş veya null ise, boş bir <see cref="LogExceptionResult"/> döner.
    /// Aksi takdirde, her bir hata mesajını <see cref="InfoResult"/> objesine dönüştürerek döndürür.
    /// </summary>
    /// <param name="errors">Hata mesajlarını içeren string dizisi. null veya boş olabilir.</param>
    /// <returns>İçerisinde hata mesajları bulunan veya boş bir <see cref="LogExceptionResult"/> nesnesi.</returns>
    public static LogExceptionResult Create(string[] errors)
    {
        errors = errors ?? Array.Empty<string>();
        if (errors.Length == 0) { return new LogExceptionResult(); }
        return new LogExceptionResult(errors.Select(x => new InfoResult(x, "")).ToArray(), default);
    }
}
************************
public sealed class PageResult
{
    /// <summary>
    /// İstisnanın gerçekleştiği yerin konumu.
    /// </summary>
    public string konum { get; set; }
    /// <summary>
    /// İstisnanın oluştuğu metodun adı.
    /// </summary>
    public string method { get; set; }
    /// <summary>
    /// İstisnanın gerçekleştiği satır numarası.
    /// </summary>
    public int line { get; set; }
    /// <summary>
    /// İstisnanın gerçekleştiği sütun numarası.
    /// </summary>
    public int column { get; set; }
    /// <summary>
    /// İstisnanın gerçekleştiği dosyanın adı.
    /// </summary>
    public string filename { get; set; }
    /// <summary>
    /// Varsayılan değerlerle başlatılır.
    /// </summary>
    public PageResult() : this("", "", default, default, "") { }
    /// <summary>
    /// Belirtilen konum, metod, satır, sütun ve dosya adı ile başlatılır.
    /// </summary>
    /// <param name="konum">İstisnanın gerçekleştiği konum.</param>
    /// <param name="method">İstisnanın oluştuğu metodun adı.</param>
    /// <param name="line">Satır numarası.</param>
    /// <param name="column">Sütun numarası.</param>
    /// <param name="filename">Dosya adı.</param>
    public PageResult(string konum, string method, int line, int column, string filename)
    {
        this.konum = konum;
        this.method = method;
        this.line = line;
        this.column = column;
        this.filename = filename;
    }
    /// <summary>
    /// value için tanımlanan nesneler: PageResult, IFormCollection, StackFrame, AnonymousObjectClass
    /// </summary>
    public static PageResult ToEntityFromObject(object value)
    {
        if (value == null) { return new PageResult(); }
        if (value is PageResult _pr) { return _pr; }
        if (value is IFormCollection _form)
        {
            return ToEntityFromObject(new
            {
                konum = _form.ToKeyValueParseOrDefault_formcollection<string>(nameof(konum)) ?? "",
                method = _form.ToKeyValueParseOrDefault_formcollection<string>(nameof(method)) ?? "",
                line = _form.ToKeyValueParseOrDefault_formcollection<int>(nameof(line)),
                column = _form.ToKeyValueParseOrDefault_formcollection<int>(nameof(column)),
                filename = _form.ToKeyValueParseOrDefault_formcollection<string>(nameof(filename)) ?? ""
            });
        }
        if (value is StackFrame _sf)
        {
            if (_sf.GetFileLineNumber() > 0)
            {
                return ToEntityFromObject(_sf.ToEnumerable().Select(x => new
                {
                    method = x.GetMethod(),
                    line = x.GetFileLineNumber(),
                    column = x.GetFileColumnNumber(),
                    filename = x.GetFileName() ?? ""
                }).Select(x => new
                {
                    konum = x.method.DeclaringType.FullName,
                    method = x.method.Name,
                    x.line,
                    x.column,
                    filename = x.filename == "" ? "" : Path.GetFileName(x.filename)
                }).FirstOrDefault());
            }
            return new PageResult();
        }
        return value.ToEnumerable().Select(x => x.ToDynamic()).Select(x => new PageResult((string)x.konum, (string)x.method, (int)x.line, (int)x.column, (string)x.filename)).FirstOrDefault();
    }
}
************************
/// <summary>
/// T.C. Bayburt Üniversitesi Kampüs türlerini temsil eden sınıf.
/// </summary>
public sealed class CKampusTypes : BaseEnum<CKampusTypes.KampusTypes>
{
    /// <summary>
    /// Kampüs türlerini tanımlayan enum.
    /// </summary>
    public enum KampusTypes : byte
    {
        [Description("Dede Korkut Külliyesi")]
        dedekorkut = 1,
        [Description("Baberti Külliyesi")]
        baberti,
        [Description("Aydıntepe")]
        aydintepe,
        [Description("Demirözü")]
        demirozu
    }
    /// <summary>
    /// Verilen <see cref="KampusTypes"/> değerini ve dili baz alarak, kampüs adını döndürür.
    /// </summary>
    /// <param name="value">Kampüs türünü temsil eden <see cref="KampusTypes"/> enum değeri.</param>
    /// <param name="dil">Çeviri yapılacak dil kodu. &quot;tr&quot; Türkçe için, &quot;en&quot; İngilizce için kullanılır.</param>
    /// <returns>Belirtilen dilde kampüs adını döndürür.</returns>
    /// <exception cref="NotSupportedException">
    /// Eğer <paramref name="value"/> geçerli bir <see cref="KampusTypes"/> değeri değilse 
    /// veya desteklenmeyen bir dil girildiyse fırlatılır.
    /// </exception>
    public static string GetDescriptionLocalizationValue(KampusTypes value, string dil)
    {
        Guard.UnSupportLanguage(dil, nameof(dil));
        if (dil == "tr") { return value.GetDescription(); }
        if (value == KampusTypes.dedekorkut) { return "Dede Korkut Campus"; }
        if (value == KampusTypes.baberti) { return "Baberti Campus"; }
        return GetDescriptionLocalizationValue(value, "tr");
    }
}
************************
ATIF işlemleri
/// <summary>
/// <paramref name="tur"/> değerleri
/// <para>- 1: Yayınlar (Makale, Bildiri, Kitap)</para>
/// <para>- 2: Sanatsal Faaliyetler</para>
/// <para>- 3: Projeler</para>
/// <para>- 5: Patentler</para>
/// <para>- 8: Tez</para>
/// </summary>
public static bool TryCitationTur(int? tur, string eseradi, out Yoksis_TipTypes _outvalue)
{
    _outvalue = default;
    if (!tur.HasValue) { return false; }
    var _s = eseradi.ToSeoFriendly();
    return (tur.Value, _s) switch
    {
        (1, "makale") => assign(out _outvalue, Yoksis_TipTypes.makale),
        (1, "bildiri") => assign(out _outvalue, Yoksis_TipTypes.bildiri),
        (1, "kitap") => assign(out _outvalue, Yoksis_TipTypes.kitap),
        (2, "") => assign(out _outvalue, Yoksis_TipTypes.sanatvetasarimetkinlikleri),
        (3, "") => assign(out _outvalue, Yoksis_TipTypes.proje),
        (5, "") => assign(out _outvalue, Yoksis_TipTypes.patent),
        (8, "tez") => assign(out _outvalue, Yoksis_TipTypes.lisansustutezdanismanligi),
        _ => false
    };
}
private static bool assign(out Yoksis_TipTypes _outvalue, Yoksis_TipTypes value)
{
    _outvalue = value;
    return true;
}
public async Task<getirAtifSayilariResponse> Get_AtifSayilariAsync(long tckn, int donem) => (await this.client.getirAtifSayilariAsync(new getirAtifSayilariRequestType
{
    parametre = new parametreTesvik
    {
        P_KULLANICI_ID = this.usertckn.ToString(),
        P_SIFRE = this.userpassword,
        P_TC_KIMLIK_NO = tckn,
        P_DONEM = donem.ToString()
    }
})).getirAtifSayilariResponse;
************************
/// <summary>
/// Başka bir NameValueCollection&#39;dan mevcut NameValueCollection&#39;a tüm anahtarları ve değerleri ekler.
/// </summary>
/// <param name="initial">Anahtar-değer çiftlerini alacak mevcut NameValueCollection.</param>
/// <param name="other">Eklenecek anahtar-değer çiftlerini içeren diğer NameValueCollection.</param>
public static void AddAllKeysAndValues(this NameValueCollection initial, NameValueCollection other)
{
    Guard.CheckNull(initial, nameof(initial));
    if (other != null) { foreach (var item in other.AllKeys) { initial.Add(item, other[item]); } }
}
************************